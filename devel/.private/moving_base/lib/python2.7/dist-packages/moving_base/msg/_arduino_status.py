# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moving_base/arduino_status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class arduino_status(genpy.Message):
  _md5sum = "3692242dbf898dca171f405d2ccd3d4b"
  _type = "moving_base/arduino_status"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float32 steer_angle

float32 drive_speed

float32[4] steer_motor

float32[4] drive_motor

bool no_rotate

bool CCW
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','steer_angle','drive_speed','steer_motor','drive_motor','no_rotate','CCW']
  _slot_types = ['std_msgs/Header','float32','float32','float32[4]','float32[4]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steer_angle,drive_speed,steer_motor,drive_motor,no_rotate,CCW

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arduino_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steer_angle is None:
        self.steer_angle = 0.
      if self.drive_speed is None:
        self.drive_speed = 0.
      if self.steer_motor is None:
        self.steer_motor = [0.] * 4
      if self.drive_motor is None:
        self.drive_motor = [0.] * 4
      if self.no_rotate is None:
        self.no_rotate = False
      if self.CCW is None:
        self.CCW = False
    else:
      self.header = std_msgs.msg.Header()
      self.steer_angle = 0.
      self.drive_speed = 0.
      self.steer_motor = [0.] * 4
      self.drive_motor = [0.] * 4
      self.no_rotate = False
      self.CCW = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.steer_angle, _x.drive_speed))
      buff.write(_get_struct_4f().pack(*self.steer_motor))
      buff.write(_get_struct_4f().pack(*self.drive_motor))
      _x = self
      buff.write(_get_struct_2B().pack(_x.no_rotate, _x.CCW))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.steer_angle, _x.drive_speed,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.steer_motor = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.drive_motor = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.no_rotate, _x.CCW,) = _get_struct_2B().unpack(str[start:end])
      self.no_rotate = bool(self.no_rotate)
      self.CCW = bool(self.CCW)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.steer_angle, _x.drive_speed))
      buff.write(self.steer_motor.tostring())
      buff.write(self.drive_motor.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.no_rotate, _x.CCW))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.steer_angle, _x.drive_speed,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.steer_motor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.drive_motor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 2
      (_x.no_rotate, _x.CCW,) = _get_struct_2B().unpack(str[start:end])
      self.no_rotate = bool(self.no_rotate)
      self.CCW = bool(self.CCW)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
