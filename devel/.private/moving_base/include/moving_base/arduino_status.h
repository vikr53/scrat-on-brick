// Generated by gencpp from file moving_base/arduino_status.msg
// DO NOT EDIT!


#ifndef MOVING_BASE_MESSAGE_ARDUINO_STATUS_H
#define MOVING_BASE_MESSAGE_ARDUINO_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace moving_base
{
template <class ContainerAllocator>
struct arduino_status_
{
  typedef arduino_status_<ContainerAllocator> Type;

  arduino_status_()
    : header()
    , steer_angle(0.0)
    , drive_speed(0.0)
    , steer_motor()
    , drive_motor()
    , no_rotate(false)
    , CCW(false)  {
      steer_motor.assign(0.0);

      drive_motor.assign(0.0);
  }
  arduino_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , steer_angle(0.0)
    , drive_speed(0.0)
    , steer_motor()
    , drive_motor()
    , no_rotate(false)
    , CCW(false)  {
  (void)_alloc;
      steer_motor.assign(0.0);

      drive_motor.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef float _drive_speed_type;
  _drive_speed_type drive_speed;

   typedef boost::array<float, 4>  _steer_motor_type;
  _steer_motor_type steer_motor;

   typedef boost::array<float, 4>  _drive_motor_type;
  _drive_motor_type drive_motor;

   typedef uint8_t _no_rotate_type;
  _no_rotate_type no_rotate;

   typedef uint8_t _CCW_type;
  _CCW_type CCW;





  typedef boost::shared_ptr< ::moving_base::arduino_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moving_base::arduino_status_<ContainerAllocator> const> ConstPtr;

}; // struct arduino_status_

typedef ::moving_base::arduino_status_<std::allocator<void> > arduino_status;

typedef boost::shared_ptr< ::moving_base::arduino_status > arduino_statusPtr;
typedef boost::shared_ptr< ::moving_base::arduino_status const> arduino_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moving_base::arduino_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moving_base::arduino_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace moving_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'moving_base': ['/home/vik/controller_ws/src/skrat-wmr-dev/moving-base/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::moving_base::arduino_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moving_base::arduino_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moving_base::arduino_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moving_base::arduino_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moving_base::arduino_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moving_base::arduino_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moving_base::arduino_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3692242dbf898dca171f405d2ccd3d4b";
  }

  static const char* value(const ::moving_base::arduino_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3692242dbf898dcaULL;
  static const uint64_t static_value2 = 0x171f405d2ccd3d4bULL;
};

template<class ContainerAllocator>
struct DataType< ::moving_base::arduino_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moving_base/arduino_status";
  }

  static const char* value(const ::moving_base::arduino_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moving_base::arduino_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float32 steer_angle\n\
\n\
float32 drive_speed\n\
\n\
float32[4] steer_motor\n\
\n\
float32[4] drive_motor\n\
\n\
bool no_rotate\n\
\n\
bool CCW\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::moving_base::arduino_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moving_base::arduino_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.steer_angle);
      stream.next(m.drive_speed);
      stream.next(m.steer_motor);
      stream.next(m.drive_motor);
      stream.next(m.no_rotate);
      stream.next(m.CCW);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arduino_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moving_base::arduino_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moving_base::arduino_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "drive_speed: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed);
    s << indent << "steer_motor[]" << std::endl;
    for (size_t i = 0; i < v.steer_motor.size(); ++i)
    {
      s << indent << "  steer_motor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.steer_motor[i]);
    }
    s << indent << "drive_motor[]" << std::endl;
    for (size_t i = 0; i < v.drive_motor.size(); ++i)
    {
      s << indent << "  drive_motor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.drive_motor[i]);
    }
    s << indent << "no_rotate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.no_rotate);
    s << indent << "CCW: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CCW);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVING_BASE_MESSAGE_ARDUINO_STATUS_H
