// Generated by gencpp from file fbl_control/plant_msg.msg
// DO NOT EDIT!


#ifndef FBL_CONTROL_MESSAGE_PLANT_MSG_H
#define FBL_CONTROL_MESSAGE_PLANT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fbl_control
{
template <class ContainerAllocator>
struct plant_msg_
{
  typedef plant_msg_<ContainerAllocator> Type;

  plant_msg_()
    : x()
    , t(0.0)
    , setpoint()  {
      x.assign(0.0);

      setpoint.assign(0.0);
  }
  plant_msg_(const ContainerAllocator& _alloc)
    : x()
    , t(0.0)
    , setpoint()  {
  (void)_alloc;
      x.assign(0.0);

      setpoint.assign(0.0);
  }



   typedef boost::array<double, 3>  _x_type;
  _x_type x;

   typedef double _t_type;
  _t_type t;

   typedef boost::array<double, 6>  _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::fbl_control::plant_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fbl_control::plant_msg_<ContainerAllocator> const> ConstPtr;

}; // struct plant_msg_

typedef ::fbl_control::plant_msg_<std::allocator<void> > plant_msg;

typedef boost::shared_ptr< ::fbl_control::plant_msg > plant_msgPtr;
typedef boost::shared_ptr< ::fbl_control::plant_msg const> plant_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fbl_control::plant_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fbl_control::plant_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fbl_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'fbl_control': ['/home/vik/controller_ws/src/skrat-wmr-dev/fbl_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fbl_control::plant_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fbl_control::plant_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fbl_control::plant_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fbl_control::plant_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fbl_control::plant_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fbl_control::plant_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fbl_control::plant_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3de265b684b485470b0c5d518a3b6ba7";
  }

  static const char* value(const ::fbl_control::plant_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3de265b684b48547ULL;
  static const uint64_t static_value2 = 0x0b0c5d518a3b6ba7ULL;
};

template<class ContainerAllocator>
struct DataType< ::fbl_control::plant_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbl_control/plant_msg";
  }

  static const char* value(const ::fbl_control::plant_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fbl_control::plant_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] x\n\
float64 t\n\
float64[6] setpoint\n\
";
  }

  static const char* value(const ::fbl_control::plant_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fbl_control::plant_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.t);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plant_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fbl_control::plant_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fbl_control::plant_msg_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "setpoint[]" << std::endl;
    for (size_t i = 0; i < v.setpoint.size(); ++i)
    {
      s << indent << "  setpoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.setpoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FBL_CONTROL_MESSAGE_PLANT_MSG_H
