// Generated by gencpp from file fbl_control/setpt_msg.msg
// DO NOT EDIT!


#ifndef FBL_CONTROL_MESSAGE_SETPT_MSG_H
#define FBL_CONTROL_MESSAGE_SETPT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fbl_control
{
template <class ContainerAllocator>
struct setpt_msg_
{
  typedef setpt_msg_<ContainerAllocator> Type;

  setpt_msg_()
    : setx()  {
      setx.assign(0.0);
  }
  setpt_msg_(const ContainerAllocator& _alloc)
    : setx()  {
  (void)_alloc;
      setx.assign(0.0);
  }



   typedef boost::array<double, 6>  _setx_type;
  _setx_type setx;





  typedef boost::shared_ptr< ::fbl_control::setpt_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fbl_control::setpt_msg_<ContainerAllocator> const> ConstPtr;

}; // struct setpt_msg_

typedef ::fbl_control::setpt_msg_<std::allocator<void> > setpt_msg;

typedef boost::shared_ptr< ::fbl_control::setpt_msg > setpt_msgPtr;
typedef boost::shared_ptr< ::fbl_control::setpt_msg const> setpt_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fbl_control::setpt_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fbl_control::setpt_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fbl_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'fbl_control': ['/home/vik/controller_ws/src/skrat-wmr-dev/fbl_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fbl_control::setpt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fbl_control::setpt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fbl_control::setpt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fbl_control::setpt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fbl_control::setpt_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fbl_control::setpt_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fbl_control::setpt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdeb67591fcccb6b7952b3b145d3c23b";
  }

  static const char* value(const ::fbl_control::setpt_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdeb67591fcccb6bULL;
  static const uint64_t static_value2 = 0x7952b3b145d3c23bULL;
};

template<class ContainerAllocator>
struct DataType< ::fbl_control::setpt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbl_control/setpt_msg";
  }

  static const char* value(const ::fbl_control::setpt_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fbl_control::setpt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] setx\n\
";
  }

  static const char* value(const ::fbl_control::setpt_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fbl_control::setpt_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setpt_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fbl_control::setpt_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fbl_control::setpt_msg_<ContainerAllocator>& v)
  {
    s << indent << "setx[]" << std::endl;
    for (size_t i = 0; i < v.setx.size(); ++i)
    {
      s << indent << "  setx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.setx[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FBL_CONTROL_MESSAGE_SETPT_MSG_H
